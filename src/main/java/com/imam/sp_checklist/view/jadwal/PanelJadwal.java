/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.imam.sp_checklist.view.jadwal;

import com.imam.sp_checklist.entity.transaksi.Jadwal;
import com.imam.sp_checklist.entity.user_akses.Grup;
import com.imam.sp_checklist.entity.user_akses.HakAksesConstant;
import com.imam.sp_checklist.entity.user_akses.Pengguna;
import com.imam.sp_checklist.manager.LoginManager;
import com.imam.sp_checklist.manager.ManageDataJadwal;
import com.imam.sp_checklist.manager.SpringManager;
import com.imam.sp_checklist.service.JadwalService;
import com.imam.sp_checklist.view.laporan.LaporanMaster;
import com.imam.sp_checklist.widget.ProgressbarLoading;
import com.stripbandunk.jwidget.model.DynamicTableModel;
import java.awt.Window;
import java.beans.PropertyChangeEvent;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.SessionFactory;
import org.hibernate.classic.Session;
import org.hibernate.jdbc.Work;

/**
 *
 * @author Imam-pc
 */
public class PanelJadwal extends javax.swing.JPanel {

    private final DynamicTableModel<Jadwal> tableModel;
    public PanelJadwal() {
        initComponents();
        
        tableModel = new DynamicTableModel<>(Jadwal.class);
        tableJadwal.setDynamicModel(tableModel);
    }
    
    public void LoadJadwal(boolean flg){
        
        Pengguna pgn = LoginManager.getInstance().getPengguna();
        Grup grup = pgn.getGrup();

        btnHapus.setEnabled(grup.mengandungHakAkses(HakAksesConstant.HAPUS_JADWAL));
        btnTambah.setEnabled(grup.mengandungHakAkses(HakAksesConstant.TAMBAH_JADWAL));
        btnUbah.setEnabled(grup.mengandungHakAkses(HakAksesConstant.UBAH_JADWAL));
        btnDetailJadwal.setEnabled(grup.mengandungHakAkses(HakAksesConstant.DETAIL_JADWAL));
        btnJadwalSelesai.setEnabled(grup.mengandungHakAkses(HakAksesConstant.JADWAL_SELESAI));
        
        
        new SwingWorker<List<Jadwal>, Object>(){

            @Override
            protected List<Jadwal> doInBackground() throws Exception {
                List<Jadwal> list;
                Thread.sleep(1000);
                
                if(comboStatus.getSelectedIndex() == 0){
                    list = ManageDataJadwal.getInstance().getJadwalAll();
                }else {
                    list = ManageDataJadwal.getInstance().getJadwalAllByFlag(flg);
                }
                
                  

                return list;
            }

            @Override
            protected void done() {
                try {
                    tableModel.clear();
                    for(Jadwal jsb : get()){
                    tableModel.add(jsb);
                }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(PanelJadwal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
  
        }.execute();
        
    }
    
    public JasperPrint displayReport(Map<String,Object>param,String varParam, Connection koneksi){
        JasperPrint jasperPrint = null;
        try {
            
            
                InputStream inputStream = getClass().getResourceAsStream(varParam);
                jasperPrint = JasperFillManager.fillReport(inputStream, param, koneksi);
                JasperViewer.viewReport(jasperPrint,false);
            
            
        } catch (JRException ex) {
            Logger.getLogger(PanelJadwal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jasperPrint;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableJadwal = new com.stripbandunk.jwidget.JDynamicTable();
        jPanel1 = new javax.swing.JPanel();
        btnTambah = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnDetailJadwal = new javax.swing.JButton();
        btnJadwalSelesai = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Daftar Jadwal Petugas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 18))); // NOI18N
        setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel2.setText("Cari :");

        jTextField1.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N

        jScrollPane1.setViewportView(tableJadwal);

        jPanel1.setOpaque(false);

        btnTambah.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });
        jPanel1.add(btnTambah);

        btnUbah.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });
        jPanel1.add(btnUbah);

        btnHapus.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        jPanel1.add(btnHapus);

        btnDetailJadwal.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDetailJadwal.setText("Detail Jadwal");
        btnDetailJadwal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailJadwalActionPerformed(evt);
            }
        });
        jPanel1.add(btnDetailJadwal);

        btnJadwalSelesai.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnJadwalSelesai.setText("Jadwal Selesai");
        btnJadwalSelesai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJadwalSelesaiActionPerformed(evt);
            }
        });
        jPanel1.add(btnJadwalSelesai);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel3.setText("Status Jadwal :");

        comboStatus.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Selesai", "Belum Selesai" }));
        comboStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        TambahJadwal jadwal = new TambahJadwal();
        jadwal.tambahJadwal();
        LoadJadwal(true);
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
        
        if(tableJadwal.getSelectedRow() != -1){
            int index = tableJadwal.convertRowIndexToModel(tableJadwal.getSelectedRow());
            Jadwal kr = tableModel.get(index);
            UbahJadwal ubh = new UbahJadwal();
            ubh.ubahJadwal(kr);
            LoadJadwal(true);

        }else{
            JOptionPane.showMessageDialog(this, "silahkan seleksi satu baris");
        }
        
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnDetailJadwalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailJadwalActionPerformed
        // TODO add your handling code here:
        //final Locale local = new Locale("id","ID");
        if(tableJadwal.getSelectedRow() != -1){
            int index = tableJadwal.convertRowIndexToModel(tableJadwal.getSelectedRow());
            final Jadwal kr = tableModel.get(index);
            
            SessionFactory sessionFactory = SpringManager.getInstance().getBean(SessionFactory.class);
            Session session = sessionFactory.openSession();
            
            session.doWork((Connection connection) -> {
                
                String pathLap = "/com/imam/sp_checklist/report/ViewJadwalDetail.jasper";
                Map<String, Object> map = new HashMap<>();
                map.put("id_petugas", kr.getPetugas().getNama());
                map.put("bulan", kr.getBulan());
                // map.put("logo",getClass().getResource("/com/imam/sp_checklist/image/SECURE.jpg"));
                map.put(JRParameter.REPORT_CONNECTION, connection);
                map.put(JRParameter.REPORT_LOCALE, new Locale("in", "ID"));
                final SwingWorker<JasperPrint, String> worker = new SwingWorker<JasperPrint, String>(){
                    
                    @Override
                    protected JasperPrint doInBackground() throws Exception {
                        JasperPrint print;
                        print = displayReport(map, pathLap, connection);
                        
                        return print;
                    }
                    
                };
                Window win = SwingUtilities.getWindowAncestor((AbstractButton)evt.getSource());
                ProgressbarLoading loding = new ProgressbarLoading();
                worker.addPropertyChangeListener((PropertyChangeEvent evt1) -> {
                    if (evt1.getPropertyName().equals("state")) {
                        if (evt1.getNewValue() == SwingWorker.StateValue.DONE) {
                            loding.dispose();
                        }
                    }
                });
                worker.execute();
                loding.pack();
                loding.setLocationRelativeTo(win);
                loding.setVisible(true);
            });
            session.close();
            
        }else{
            JOptionPane.showMessageDialog(this, "silahkan seleksi satu baris");
        }
        
    }//GEN-LAST:event_btnDetailJadwalActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        
        if(tableJadwal.getSelectedRow() != -1){
            
            int closing;
            closing = JOptionPane.showConfirmDialog(this,
                "Apakah anda yakin, ingin hapus...?", "Konfirmasi Hapus Data",JOptionPane.YES_NO_OPTION);
            if (closing==0){
                int index = tableJadwal.convertRowIndexToModel(tableJadwal.getSelectedRow());
                Jadwal jw = tableModel.get(index);
                JadwalService sv = SpringManager.getInstance().getBean(JadwalService.class);
                sv.delete(jw);
                LoadJadwal(true);

            }else{
                this.show();
            }
            

        }else{
            JOptionPane.showMessageDialog(this, "silahkan seleksi satu baris");
        }
        
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnJadwalSelesaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJadwalSelesaiActionPerformed
        // TODO add your handling code here:
        
        if(tableJadwal.getSelectedRow() != -1){
            
             int closing;
            closing = JOptionPane.showConfirmDialog(this,
                "Apakah anda yakin, ingin menyelesaikan jadwal...?", "Konfirmasi Jadwal Selesai",JOptionPane.YES_NO_OPTION);
            if (closing==0){
                int index = tableJadwal.convertRowIndexToModel(tableJadwal.getSelectedRow());
                Jadwal jw = tableModel.get(index);
                JadwalService sv = SpringManager.getInstance().getBean(JadwalService.class);
                jw.setFlag(false);
                sv.isFlag(jw);
                
                LoadJadwal(true);

            }else{
                this.show();
            }
            
        }
        
    }//GEN-LAST:event_btnJadwalSelesaiActionPerformed

    private void comboStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStatusActionPerformed
        // TODO add your handling code here:
        switch (comboStatus.getSelectedIndex()) {
            case 0:
                LoadJadwal(true);
                break;
            case 1:
                LoadJadwal(true);
                break;
            default:
                LoadJadwal(false);
                break;
        }
        
    }//GEN-LAST:event_comboStatusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetailJadwal;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnJadwalSelesai;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUbah;
    private javax.swing.JComboBox<String> comboStatus;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private com.stripbandunk.jwidget.JDynamicTable tableJadwal;
    // End of variables declaration//GEN-END:variables
}
