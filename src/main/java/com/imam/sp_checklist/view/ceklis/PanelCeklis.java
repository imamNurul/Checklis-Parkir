/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.imam.sp_checklist.view.ceklis;

import com.imam.sp_checklist.entity.transaksi.Ceklis;
import com.imam.sp_checklist.entity.user_akses.Grup;
import com.imam.sp_checklist.entity.user_akses.HakAksesConstant;
import com.imam.sp_checklist.entity.user_akses.Pengguna;
import com.imam.sp_checklist.manager.LoginManager;
import com.imam.sp_checklist.manager.ManageDataCeklis;
import com.imam.sp_checklist.manager.SpringManager;
import com.imam.sp_checklist.service.CeklisService;
import com.imam.sp_checklist.widget.ProgressbarLoading;
import com.stripbandunk.jwidget.model.DynamicTableModel;
import java.awt.Window;
import java.beans.PropertyChangeEvent;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.PatternSyntaxException;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.SessionFactory;
import org.hibernate.classic.Session;


/**
 *
 * @author Imam-pc
 */
public class PanelCeklis extends javax.swing.JPanel {
    
    private final DynamicTableModel<Ceklis> tableModel;
    private Ceklis ceklis;
    
    private Locale locale = Locale.forLanguageTag("in-ID");
    private Calendar now;
    public PanelCeklis() {
        
        initComponents();
        
        
        tableModel = new DynamicTableModel<>(Ceklis.class);
        tableCeklis.setDynamicModel(tableModel);
        
        blnChooser.setLocale(locale);
        now = Calendar.getInstance(locale);
        
        
        
    }
    
    public void LoadCeklis(final String bln, final int thn){
        
        Pengguna pgn = LoginManager.getInstance().getPengguna();
        Grup grup = pgn.getGrup();

        btnHapus.setEnabled(grup.mengandungHakAkses(HakAksesConstant.HAPUS_FORM_CEKLIS));
        btnTambah.setEnabled(grup.mengandungHakAkses(HakAksesConstant.TAMBAH_FORM_CEKLIS));
        btnUbah.setEnabled(grup.mengandungHakAkses(HakAksesConstant.UBAH_FORM_CEKLIS));
        btnDetail.setEnabled(grup.mengandungHakAkses(HakAksesConstant.DETAIL_CEKLIS));
        
        
       
        new SwingWorker<List<Ceklis>, Object>(){

            @Override
            protected List<Ceklis> doInBackground() throws Exception {
                
                Thread.sleep(1000);
                 List<Ceklis> list = ManageDataCeklis.getInstance().getCeklisAll(bln, thn);

                return list;
            }

            @Override
            protected void done() {
                try {
                    tableModel.clear();
                    for(Ceklis jsb : get()){
                    tableModel.add(jsb);
                }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(PanelCeklis.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
  
        }.execute();
        
    }
    
    public JasperPrint displayReport(Map<String,Object>param,String varParam, Connection koneksi){
        JasperPrint jasperPrint = null;
        try {
            
            
                InputStream inputStream = getClass().getResourceAsStream(varParam);
                jasperPrint = JasperFillManager.fillReport(inputStream, param, koneksi);
                JasperViewer.viewReport(jasperPrint,false);
            
            
        } catch (JRException ex) {
            Logger.getLogger(PanelCeklis.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jasperPrint;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCari = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnTambah = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnDetail = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCeklis = new com.stripbandunk.jwidget.JDynamicTable();
        thnChooser = new com.toedter.calendar.JYearChooser();
        btnCari = new javax.swing.JButton();
        blnChooser = new com.toedter.calendar.JMonthChooser();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Data Checklist Parkir Mobil", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 18))); // NOI18N
        setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imam/sp_checklist/image/icons-search-25.png"))); // NOI18N

        txtCari.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCariKeyPressed(evt);
            }
        });

        jPanel1.setOpaque(false);

        btnTambah.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });
        jPanel1.add(btnTambah);

        btnUbah.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });
        jPanel1.add(btnUbah);

        btnHapus.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        jPanel1.add(btnHapus);

        btnDetail.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDetail.setText("Detail Checklist");
        btnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailActionPerformed(evt);
            }
        });
        jPanel1.add(btnDetail);

        jScrollPane2.setViewportView(tableCeklis);

        btnCari.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        btnCari.setText("CARI");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        blnChooser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        blnChooser.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(blnChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(thnChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtCari)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(blnChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thnChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        int month = blnChooser.getMonth();
       
        
          DateFormatSymbols dfs = new DateFormatSymbols(locale);
          String namaBln = dfs.getMonths()[month];
        
        System.out.println("get bln: "+namaBln);
        System.out.println("get thn: "+thnChooser.getYear());
        TambahCeklis tk = new TambahCeklis();
        tk.tambahCeklis(namaBln, thnChooser.getYear());
        LoadCeklis(namaBln, thnChooser.getYear());
        
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
//        int month = blnChooser.getMonth();
//        int idx = 1;
//        int vm = month + idx;
          int month = blnChooser.getMonth();
          DateFormatSymbols dfs = new DateFormatSymbols(locale);
          String namaBln = dfs.getMonths()[month];
         if(tableCeklis.getSelectedRow() != -1){
            int index = tableCeklis.convertRowIndexToModel(tableCeklis.getSelectedRow());
            Ceklis kr = tableModel.get(index);
            UbahCeklis ubh = new UbahCeklis();
            ubh.ubahCeklis(kr,namaBln,thnChooser.getYear());
            LoadCeklis(namaBln, thnChooser.getYear());

        }else{
            JOptionPane.showMessageDialog(this, "silahkan seleksi satu baris");
        }
        
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        if(tableCeklis.getSelectedRow() != -1){
            
            int month = blnChooser.getMonth();
          DateFormatSymbols dfs = new DateFormatSymbols(locale);
          String namaBln = dfs.getMonths()[month];
            
            int closing;
            closing = JOptionPane.showConfirmDialog(this,
                "Apakah anda yakin, ingin hapus...?", "Konfirmasi Hapus Data Checklist",JOptionPane.YES_NO_OPTION);
            if (closing==0){
                int index = tableCeklis.convertRowIndexToModel(tableCeklis.getSelectedRow());
                Ceklis kr = tableModel.get(index);
                CeklisService sv = SpringManager.getInstance().getBean(CeklisService.class);
                sv.delete(kr);
                LoadCeklis(namaBln, thnChooser.getYear());

            }else{
                this.show();
            }
            

        }else{
            JOptionPane.showMessageDialog(this, "silahkan seleksi satu baris");
        }
        
        
    }//GEN-LAST:event_btnHapusActionPerformed

    private void txtCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyPressed
        // TODO add your handling code here:
        
         try{
            String cari = txtCari.getText();
            TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) tableCeklis.getRowSorter();
            sorter.setRowFilter(RowFilter.regexFilter(cari));
        }catch(PatternSyntaxException ex){

        }
        
    }//GEN-LAST:event_txtCariKeyPressed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        // TODO add your handling code here:
//        int month = blnChooser.getMonth();
//        int idx = 1;
//        int vm = month + idx;
        int month = blnChooser.getMonth();
          DateFormatSymbols dfs = new DateFormatSymbols(locale);
          String namaBln = dfs.getMonths()[month];
        LoadCeklis(namaBln, thnChooser.getYear());
        
        
    }//GEN-LAST:event_btnCariActionPerformed

    private void btnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailActionPerformed
        // TODO add your handling code here:
        
        if(tableCeklis.getSelectedRow() != -1){
            int index = tableCeklis.convertRowIndexToModel(tableCeklis.getSelectedRow());
            final Ceklis kr = tableModel.get(index);
            
            SimpleDateFormat dtf = new SimpleDateFormat("EEEE, d MMMM yyyy", locale);
            String dtfs = dtf.format(kr.getTglCeklis());
        
            final String timev = dtfs;
            
            SessionFactory sessionFactory = SpringManager.getInstance().getBean(SessionFactory.class);
            Session session = sessionFactory.openSession();
            
            session.doWork((Connection connection) -> {
                try {
                    String pathLap = "/com/imam/sp_checklist/report/ViewCeklislDetai.jasper";
                    
                    InputStream logo = getClass().getResourceAsStream("/com/imam/sp_checklist/report/secure-logo.png");
                    
                    Map<String, Object> map = new HashMap<>();
                    map.put("tgl", new java.sql.Date(kr.getTglCeklis().getTime()));
                    map.put("tglName", timev);
                    map.put("logo", ImageIO.read(new ByteArrayInputStream(JRLoader.loadBytes(logo))));
                    map.put("pengawas", kr.getJadwal().getPengawas().getNama());
                    map.put("petugas", kr.getJadwal().getPetugas().getNama());
                    
                    map.put(JRParameter.REPORT_CONNECTION, connection);
                    map.put(JRParameter.REPORT_LOCALE, new Locale("in", "ID"));
                    
                    final SwingWorker<JasperPrint, String> worker = new SwingWorker<JasperPrint, String>(){
                        
                        @Override
                        protected JasperPrint doInBackground() throws Exception {
                            JasperPrint print;
                            print = displayReport(map, pathLap, connection);
                            
                            return print;
                        }
                        
                    };
                    Window win = SwingUtilities.getWindowAncestor((AbstractButton)evt.getSource());
                    ProgressbarLoading loding = new ProgressbarLoading();
                    worker.addPropertyChangeListener((PropertyChangeEvent evt1) -> {
                        if (evt1.getPropertyName().equals("state")) {
                            if (evt1.getNewValue() == SwingWorker.StateValue.DONE) {
                                loding.dispose();
                            }
                        }
                    });
                    worker.execute();
                    loding.pack();
                    loding.setLocationRelativeTo(win);
                    loding.setVisible(true);
                    
                    
                } catch (IOException | JRException ex) {
                    Logger.getLogger(PanelCeklis.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            session.close();
            
        }else{
            JOptionPane.showMessageDialog(this, "silahkan seleksi satu baris");
        }
        
    }//GEN-LAST:event_btnDetailActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JMonthChooser blnChooser;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnDetail;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUbah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.stripbandunk.jwidget.JDynamicTable tableCeklis;
    private com.toedter.calendar.JYearChooser thnChooser;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables
}
